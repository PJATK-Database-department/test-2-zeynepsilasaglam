// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Test2.Models;

namespace Test2.Migrations
{
    [DbContext(typeof(TestDbContext))]
    partial class TestDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Test2.Models.Car", b =>
                {
                    b.Property<int>("IdCar")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("ProductionYear")
                        .HasColumnType("int");

                    b.HasKey("IdCar");

                    b.ToTable("Car");

                    b.HasData(
                        new
                        {
                            IdCar = 1,
                            Name = "BMW",
                            ProductionYear = 2020
                        });
                });

            modelBuilder.Entity("Test2.Models.Inspection", b =>
                {
                    b.Property<int>("IdInspection")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("IdCar")
                        .HasColumnType("int");

                    b.Property<int>("IdMechanic")
                        .HasColumnType("int");

                    b.Property<DateTime>("InspectionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("IdInspection");

                    b.HasIndex("IdCar");

                    b.HasIndex("IdMechanic");

                    b.ToTable("Inspection");

                    b.HasData(
                        new
                        {
                            IdInspection = 1,
                            Comment = "ababa",
                            IdCar = 1,
                            IdMechanic = 1,
                            InspectionDate = new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Test2.Models.Mechanic", b =>
                {
                    b.Property<int>("IdMechanic")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("IdMechanic");

                    b.ToTable("Mechanic");

                    b.HasData(
                        new
                        {
                            IdMechanic = 1,
                            FirstName = "Jon",
                            LastName = "Doe"
                        });
                });

            modelBuilder.Entity("Test2.Models.ServiceTypeDict", b =>
                {
                    b.Property<int>("IdServiceType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<string>("ServiceType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("IdServiceType");

                    b.ToTable("ServiceTypeDict");

                    b.HasData(
                        new
                        {
                            IdServiceType = 1,
                            Price = 100.56f,
                            ServiceType = "Full"
                        });
                });

            modelBuilder.Entity("Test2.Models.ServiseTypeDict_Inspection", b =>
                {
                    b.Property<int>("IdInspection")
                        .HasColumnType("int");

                    b.Property<int>("IdServiceType")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("IdInspection", "IdServiceType");

                    b.HasIndex("IdServiceType");

                    b.ToTable("ServiseTypeDict_Inspection");

                    b.HasData(
                        new
                        {
                            IdInspection = 1,
                            IdServiceType = 1,
                            Comments = "xyxyx"
                        });
                });

            modelBuilder.Entity("Test2.Models.Inspection", b =>
                {
                    b.HasOne("Test2.Models.Car", "Car")
                        .WithMany("Inspections")
                        .HasForeignKey("IdCar")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Test2.Models.Mechanic", "Mechanic")
                        .WithMany("Inspections")
                        .HasForeignKey("IdMechanic")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("Mechanic");
                });

            modelBuilder.Entity("Test2.Models.ServiseTypeDict_Inspection", b =>
                {
                    b.HasOne("Test2.Models.Inspection", "Inspection")
                        .WithMany("ServiseTypeDict_Inspections")
                        .HasForeignKey("IdInspection")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Test2.Models.ServiceTypeDict", "ServiceTypeDict")
                        .WithMany("ServiseTypeDict_Inspections")
                        .HasForeignKey("IdServiceType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inspection");

                    b.Navigation("ServiceTypeDict");
                });

            modelBuilder.Entity("Test2.Models.Car", b =>
                {
                    b.Navigation("Inspections");
                });

            modelBuilder.Entity("Test2.Models.Inspection", b =>
                {
                    b.Navigation("ServiseTypeDict_Inspections");
                });

            modelBuilder.Entity("Test2.Models.Mechanic", b =>
                {
                    b.Navigation("Inspections");
                });

            modelBuilder.Entity("Test2.Models.ServiceTypeDict", b =>
                {
                    b.Navigation("ServiseTypeDict_Inspections");
                });
#pragma warning restore 612, 618
        }
    }
}
